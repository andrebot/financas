import jwt from 'jsonwebtoken';
import { Request, Response, NextFunction } from 'express';

/**
 * Interface for the Token
 */
export type Tokens = {
  /**
   * Access Token generated by the server
   */
  accessToken: string;
  /**
   * Refresh Token generated by the server
   */
  refreshToken: string;
};

/**
 * Interface for the Token
 */
export interface Token extends jwt.Jwt {
  /**
   * Payload of the token. It contains the email, role, first name and last name
   */
  payload: {
    /** Email of the user */
    email: string;
    /** Role of the user. Can be either 'admin' or 'user' */
    role: 'admin' | 'user';
    /** First name of the user */
    firstName: string;
    /** Last name of the user */
    lastName: string;
  }
}

/**
 * Interface for the User Payload
 */
export type UserPayload = {
  /** Email of the user */
  email?: string;
  /** First name of the user */
  firstName?: string;
  /** Last name of the user */
  lastName?: string;
  /** Role of the user. Can be either 'admin' or 'user' */
  role?: 'admin' | 'user';
  /** Id of the user */
  id?: string;
};

export interface RequestWithUser extends Request {
  user?: UserPayload;
}

/**
 * Interface for token validation middleware
 */
/* eslint-disable no-unused-vars */
export type TokenValidationMiddleware = (
  req: RequestWithUser,
  res: Response,
  next: NextFunction,
) => void;

export interface IContentController {
  /**
   * Create content.
   *
   * @param req - The request object
   * @param res - The response object
   * @returns The created content
   */
  createContent(req: RequestWithUser, res: Response): Promise<Response>;
  /**
   * Update content. If the user is an admin, they can update any content.
   *
   * @param req - The request object
   * @param res - The response object
   * @returns The updated content
   */
  updateContent(req: RequestWithUser, res: Response): Promise<Response>;
  /**
   * Delete content by id. If the user is an admin, they can delete any content.
   * If the user is not an admin, they can only delete their own content.
   *
   * @param req - The request object
   * @param res - The response object
   * @returns The deleted content
   */
  deleteContent(req: RequestWithUser, res: Response): Promise<Response>;
  /**
   * List user content. If the user is an admin, they can list all content.
   *
   * @param req - The request object
   * @param res - The response object
   * @returns The list of content
   */
  listContent(req: RequestWithUser, res: Response): Promise<Response>;
  /**
   * Get content by id. If the user is an admin, they can get any content.
   *
   * @param req - The request object
   * @param res - The response object
   * @returns The content
   */
  getContent(req: RequestWithUser, res: Response): Promise<Response>;
}

export interface IBudgetController extends IContentController {
  /**
   * Get budget by id. If the user is an admin, they can get any budget.
   *
   * @param req - The request object
   * @param res - The response object
   * @returns The budget
   */
  getBudget(req: RequestWithUser, res: Response): Promise<Response>;
}
/* eslint-enable no-unused-vars */
